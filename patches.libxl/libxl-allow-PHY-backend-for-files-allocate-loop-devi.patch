From 60a517030f31bbb94caa078f3cfab660909d42d6 Mon Sep 17 00:00:00 2001
From: Marek Marczykowski <marmarek@invisiblethingslab.com>
Date: Tue, 16 Apr 2013 22:20:25 +0200
Subject: [PATCH] libxl: allow PHY backend for files - allocate loop device
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Invisible Things Lab
Cc: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>

This is implementation of /etc/xen/scripts/block behaviour, but without
calling the script, which should be much faster.

Changes in v2:
 - call libxl__loopdev_cleanup only on device remove and only
   if no scripts already was called
 - fix FD leak

Change in v3:
 - set loopdev info

Signed-off-by: Marek Marczykowski <marmarek@invisiblethingslab.com>
Signed-off-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
---
 tools/libxl/libxl.c          |  13 ++++-
 tools/libxl/libxl_device.c   |  10 ++++
 tools/libxl/libxl_internal.h |   9 +++
 tools/libxl/libxl_linux.c    | 136 +++++++++++++++++++++++++++++++++++++++++++
 tools/libxl/libxl_netbsd.c   |  11 ++++
 5 files changed, 178 insertions(+), 1 deletion(-)

diff --git a/tools/libxl/libxl.c b/tools/libxl/libxl.c
index d38d0c7..54a7ad4 100644
--- a/tools/libxl/libxl.c
+++ b/tools/libxl/libxl.c
@@ -2493,7 +2493,18 @@ static void device_disk_add(libxl__egc *egc, uint32_t domid,
                 if (!disk->script &&
                     disk->backend_domid == LIBXL_TOOLSTACK_DOMID) {
                     int major, minor;
-                    if (!libxl__device_physdisk_major_minor(dev, &major, &minor))
+                    char *node;
+
+                    node = libxl__loopdev_setup(gc, dev);
+                    if (!node) {
+                        /* error already reported by libxl__setup_loopdev */
+                        goto out;
+                    }
+                    if (node != dev) {
+                        flexarray_append_pair(back, "node", node);
+                    }
+
+                    if (!libxl__device_physdisk_major_minor(node, &major, &minor))
                         flexarray_append_pair(back, "physical-device",
                                               libxl__sprintf(gc, "%x:%x", major, minor));
                 }
diff --git a/tools/libxl/libxl_device.c b/tools/libxl/libxl_device.c
index 8bb5e93..3de6505 100644
--- a/tools/libxl/libxl_device.c
+++ b/tools/libxl/libxl_device.c
@@ -973,6 +973,7 @@ static void device_hotplug(libxl__egc *egc, libxl__ao_device *aodev)
     STATE_AO_GC(aodev->ao);
     libxl__async_exec_state *aes = &aodev->aes;
     char *be_path = libxl__device_backend_path(gc, aodev->dev);
+    char *node;
     char **args = NULL, **env = NULL;
     int rc = 0;
     int hotplug, nullfd = -1;
@@ -1019,6 +1020,15 @@ static void device_hotplug(libxl__egc *egc, libxl__ao_device *aodev)
     case 0:
         /* no hotplug script to execute */
         LOG(DEBUG, "No hotplug script to execute");
+        if (!aodev->num_exec && aodev->action == LIBXL__DEVICE_ACTION_REMOVE) {
+            /* check if we have loop device allocated - if so, try to release it */
+            node = libxl__xs_read(gc, XBT_NULL, GCSPRINTF("%s/node", be_path));
+            if (node) {
+                /* ignore errors: if device is already released - no problem, if
+                 * EBUSY - can be shared */
+                libxl__loopdev_cleanup(gc, node);
+            }
+        }
         goto out;
     case 1:
         /* execute hotplug script */
diff --git a/tools/libxl/libxl_internal.h b/tools/libxl/libxl_internal.h
index 1699f32..7c4b307 100644
--- a/tools/libxl/libxl_internal.h
+++ b/tools/libxl/libxl_internal.h
@@ -1328,6 +1328,15 @@ void libxl__domaindeathcheck_stop(libxl__gc *gc, libxl__domaindeathcheck *dc);
  */
 _hidden int libxl__try_phy_backend(mode_t st_mode);
 
+/*
+ * libxl__setup_loopdev - Setup loop device if needed.
+ *
+ * Return its path on success or NULL in case of failure. If no loop device is
+ * needed, return original filename.
+ */
+_hidden char *libxl__loopdev_setup(libxl__gc *gc, char *filename);
+
+_hidden void libxl__loopdev_cleanup(libxl__gc *gc, char *devname);
 
 _hidden char *libxl__devid_to_localdev(libxl__gc *gc, int devid);
 
diff --git a/tools/libxl/libxl_linux.c b/tools/libxl/libxl_linux.c
index be4afc6..e5b310b 100644
--- a/tools/libxl/libxl_linux.c
+++ b/tools/libxl/libxl_linux.c
@@ -16,6 +16,7 @@
 #include "libxl_osdeps.h" /* must come before any other headers */
 
 #include "libxl_internal.h"
+#include <linux/loop.h>
  
 int libxl__try_phy_backend(mode_t st_mode)
 {
@@ -26,6 +27,141 @@ int libxl__try_phy_backend(mode_t st_mode)
     return 0;
 }
 
+char *libxl__loopdev_setup(libxl__gc *gc, char *filename) {
+    struct stat st;
+    DIR *sysblock;
+    int dir_fd;
+    int control_fd = -1;
+    int loop_fd = -1;
+    int file_fd = -1;
+    int devnr;
+    struct dirent *d;
+    struct loop_info64  info;
+    char *loop_name = NULL;
+    char *ret = NULL;
+
+    if (stat(filename, &st) < 0) {
+        LOG(ERROR, "unable to stat %s", filename);
+        return NULL;
+    }
+
+    /* do not do anything if filename already is block device */
+    if (S_ISBLK(st.st_mode))
+        return filename;
+
+    /* first check if file has already loop device assigned according to
+     *
+     * losetup implementation readdir on /sys/block + stat on
+     * loop/backing_file is faster than open each loop dev
+     */
+    sysblock = opendir("/sys/block");
+    if (!sysblock) {
+        LOG(ERROR, "unable to open /sys/block");
+        return NULL;
+    }
+
+    dir_fd = dirfd(sysblock);
+
+    while ((d = readdir(sysblock))) {
+        char name[256];
+        struct stat buf;
+
+        if (strcmp(d->d_name, ".") == 0
+                || strcmp(d->d_name, "..") == 0
+                || strncmp(d->d_name, "loop", 4) != 0)
+            continue;
+        snprintf(name, sizeof(name), "%s/loop/backing_file", d->d_name);
+        if (fstatat(dir_fd, name, &buf, 0) == 0) {
+            snprintf(name, sizeof(name), "/dev/%s", d->d_name);
+            loop_fd = open(name, O_RDWR);
+            if (loop_fd < 0) {
+                LOG(ERROR, "unable to open %s", name);
+                goto out;
+            }
+            if (ioctl(loop_fd, LOOP_GET_STATUS64, &info) < 0) {
+                LOG(ERROR, "unable to get %s info: %s", name, strerror(errno));
+                goto out;
+            }
+            if (info.lo_inode == st.st_ino && info.lo_device == st.st_dev) {
+                /* found */
+                ret = libxl__strdup(gc, name);
+                goto out;
+            }
+            close(loop_fd);
+            loop_fd = -1;
+        }
+    }
+
+    /* not found, so allocate new one */
+    file_fd = open(filename, O_RDWR);
+    if (file_fd < 0) {
+        LOG(ERROR, "unable to open %s: %s", filename, strerror(errno));
+        goto out;
+    }
+
+    control_fd = open("/dev/loop-control", O_RDWR);
+    if (control_fd < 0) {
+        LOG(ERROR, "unable to open /dev/loop-control: %s", strerror(errno));
+        goto out;
+    }
+    devnr = ioctl(control_fd, LOOP_CTL_GET_FREE);
+    if (devnr < 0) {
+        LOG(ERROR, "unable to get free loop device: %s", strerror(errno));
+        goto out;
+    }
+    loop_name = libxl__sprintf(gc, "/dev/loop%d", devnr);
+    loop_fd = open(loop_name, O_RDWR);
+    if (loop_fd < 0) {
+        LOG(ERROR, "unable to open %s: %s", loop_name, strerror(errno));
+        goto out;
+    }
+    if (ioctl(loop_fd, LOOP_SET_FD, file_fd) < 0) {
+        LOG(ERROR, "unable to set loop backing store: %s", strerror(errno));
+        goto out;
+    }
+    memset(&info, 0, sizeof(info));
+    strncpy((char*)info.lo_file_name, filename, LO_NAME_SIZE);
+    info.lo_file_name[LO_NAME_SIZE-1] = 0;
+    if (ioctl(loop_fd, LOOP_SET_STATUS64, &info) < 0) {
+        LOG(ERROR, "unable to set loop info: %s", strerror(errno));
+        goto out;
+    }
+    ret = loop_name;
+
+out:
+    if (file_fd >= 0)
+        close(file_fd);
+    if (control_fd >= 0)
+        close(control_fd);
+    if (loop_fd >= 0)
+        close(loop_fd);
+    if (sysblock)
+        closedir(sysblock);
+
+    return ret;
+}
+
+void libxl__loopdev_cleanup(libxl__gc *gc, char *devname)
+{
+    int loop_fd;
+
+    loop_fd = open(devname, O_RDWR);
+    if (loop_fd < 0) {
+        LOG(ERROR, "unable to open device %s: %s", devname, strerror(errno));
+        goto out;
+    }
+
+    if (ioctl(loop_fd, LOOP_CLR_FD) < 0) {
+        LOG(ERROR, "unable to release device %s: %s", devname, strerror(errno));
+        goto out;
+    }
+
+out:
+    if (loop_fd >= 0)
+        close(loop_fd);
+}
+
+
 #define EXT_SHIFT 28
 #define EXTENDED (1<<EXT_SHIFT)
 #define VDEV_IS_EXTENDED(dev) ((dev)&(EXTENDED))
diff --git a/tools/libxl/libxl_netbsd.c b/tools/libxl/libxl_netbsd.c
index 096c057..e2dc725 100644
--- a/tools/libxl/libxl_netbsd.c
+++ b/tools/libxl/libxl_netbsd.c
@@ -25,6 +25,17 @@ int libxl__try_phy_backend(mode_t st_mode)
     return 0;
 }
 
+char *libxl__loopdev_setup(libxl__gc *gc, char *filename)
+{
+    /* files supported natively */
+    return filename;
+}
+
+void libxl__loopdev_cleanup(libxl__gc *gc, char *devname)
+{
+    /* nothing to do */
+}
+
 char *libxl__devid_to_localdev(libxl__gc *gc, int devid)
 {
     /* TODO */
-- 
2.1.0

