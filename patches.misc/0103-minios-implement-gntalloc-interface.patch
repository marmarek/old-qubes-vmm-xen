From f0a629f38de3f067230c2a32003e03b9268a5b35 Mon Sep 17 00:00:00 2001
From: Marek Marczykowski <marmarek@invisiblethingslab.com>
Date: Tue, 23 Apr 2013 05:16:21 +0200
Subject: [PATCH 103/105] minios: implement gntalloc interface
Organization: Invisible Things Lab
Cc: Marek Marczykowski <marmarek@invisiblethingslab.com>

Dumb version of gntalloc linux interface. Keep track on allocated
pages on a list, additionally with requested notification info. Then the
list is used at unmap call (which have nothing to do with real munmap in
Mini-OS...).  Notification can be set only at allocation time and cannot
be changed later.

Signed-off-by: Marek Marczykowski <marmarek@invisiblethingslab.com>
---
 extras/mini-os/Makefile           |   1 +
 extras/mini-os/gntalloc.c         | 167 ++++++++++++++++++++++++++++++++++++++
 extras/mini-os/include/gntalloc.h |  39 +++++++++
 3 files changed, 207 insertions(+)
 create mode 100644 extras/mini-os/gntalloc.c
 create mode 100644 extras/mini-os/include/gntalloc.h

diff --git a/extras/mini-os/Makefile b/extras/mini-os/Makefile
index 50d038b..658c159 100644
--- a/extras/mini-os/Makefile
+++ b/extras/mini-os/Makefile
@@ -81,6 +81,7 @@ src-y += events.c
 src-$(CONFIG_FBFRONT) += fbfront.c
 src-y += gntmap.c
 src-y += gnttab.c
+src-y += gntalloc.c
 src-y += hypervisor.c
 src-y += kernel.c
 src-y += lock.c
diff --git a/extras/mini-os/gntalloc.c b/extras/mini-os/gntalloc.c
new file mode 100644
index 0000000..1029d5c
--- /dev/null
+++ b/extras/mini-os/gntalloc.c
@@ -0,0 +1,168 @@
+/******************************************************************************
+ * gntalloc.c
+ * 
+ * Simple grant allocation interface, with munmap notification support.
+ *
+ * Files of type FTYPE_GNTALLOC contain a gntalloc, which have list of granted
+ * pages, with grant reference (needed for corresponding unmap) and unmap
+ * notification config (byte to clear and event channel to fire).
+ * 
+ * Copyright (c) 2013 Marek Marczykowski <marmarek@invisiblethingslab.com>
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to
+ * deal in the Software without restriction, including without limitation the
+ * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+ * sell copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ * 
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include <mini-os/os.h>
+#include <mini-os/console.h>
+#include <mini-os/mm.h>
+#include <mini-os/gntalloc.h>
+#include <mini-os/gnttab.h>
+#include <sys/queue.h>
+#include <stdint.h>
+#include <malloc.h>
+#include <mini-os/events.h>
+#include <errno.h>
+
+
+int gntalloc_init(struct gntalloc *alloc)
+{
+    LIST_INIT(&alloc->gref_list);
+    return 0;
+}
+
+void *gntalloc_share_pages(struct gntalloc *gntalloc, 
+        uint32_t domid, int count,
+        uint32_t *refs, int writable, 
+        uint32_t notify_offset, evtchn_port_t notify_port)
+{
+    void *area = NULL;
+    int i, mfn;
+    struct gntalloc_gref *gref_metadata = NULL;
+
+    area = memalign(PAGE_SIZE, count * PAGE_SIZE);
+
+    if (!area) {
+        printk("gntalloc_share_pages: alloc failed");
+        goto error;
+    }
+
+    gref_metadata = malloc(sizeof(struct gntalloc_gref)+count*sizeof(grant_ref_t));
+    if (!gref_metadata) {
+        printk("gntalloc_share_pages: alloc failed");
+        goto error;
+    }
+
+    gref_metadata->virtual_address = area;
+    gref_metadata->count = count;
+    gref_metadata->notify.off = notify_offset;
+    gref_metadata->notify.event = notify_port;
+
+    for (i = 0; i < count; i++) {
+        mfn = virtual_to_mfn((char*)area + i*PAGE_SIZE);
+        /* gnttab_grant_access will call BUG() in case of failure, so don't
+         * check return value */
+        refs[i] = gnttab_grant_access(domid, mfn, !writable);
+        gref_metadata->gref_ids[i] = refs[i];
+    }
+
+    LIST_INSERT_HEAD(&gntalloc->gref_list, gref_metadata, next_gref);
+
+    return area;
+
+error:
+    if (gref_metadata)
+        free(gref_metadata);
+    if (area)
+        free(area);
+    return NULL;
+}
+
+
+/* notify about planned munmap; do not release any resource */
+void gntalloc_munmap_notify(struct gntalloc_gref *gref)
+{
+    if (gref->notify.off != -1) {
+        ((uint8_t*)gref->virtual_address)[gref->notify.off] = 0;
+        gref->notify.off = -1;
+    }
+    if (gref->notify.event != -1) {
+        notify_remote_via_evtchn(gref->notify.event);
+        gref->notify.event = -1;
+    }
+}
+
+/* terminate access, free memory, invalidate gref */
+int gntalloc_munmap_gref(struct gntalloc_gref *gref)
+{
+    int i;
+    int in_use = 0;
+
+    gntalloc_munmap_notify(gref);
+
+    for (i = 0; i < gref->count; i++) {
+        if (!gnttab_end_access(gref->gref_ids[i]))
+            in_use = 1;
+        else
+            gref->gref_ids[i] = -1;
+    }
+
+    if (in_use)
+        return -EBUSY;
+
+    free(gref->virtual_address);
+    LIST_REMOVE(gref, next_gref);
+    free(gref);
+
+    return 0;
+}
+
+int gntalloc_munmap(struct gntalloc *alloc, void *start_address, int count)
+{
+    struct gntalloc_gref *gref, *tgref;
+    int ret = -ENOENT;
+
+    /* LIST_FOREACH_SAFE */
+    for (gref = LIST_FIRST(&alloc->gref_list);
+        (gref) && ((tgref) = LIST_NEXT(gref, next_gref), 1);
+        gref = tgref) {
+        if (gref->virtual_address == start_address) {
+            if (gref->count != count) {
+                printk("Partial unmap not supported (%d != %d)!", gref->count, count);
+                return -EINVAL;
+            }
+            ret = gntalloc_munmap_gref(gref);
+            break;
+        }
+    }
+
+    return ret;
+}
+
+void gntalloc_fini(struct gntalloc *alloc)
+{
+    struct gntalloc_gref *gref, *tgref;
+
+    /* unmap all grefs */
+    /* LIST_FOREACH_SAFE */
+    for (gref = LIST_FIRST(&alloc->gref_list);
+        (gref) && ((tgref) = LIST_NEXT(gref, next_gref), 1);
+        gref = tgref) {
+        gntalloc_munmap_gref(gref);
+    }
+}
diff --git a/extras/mini-os/include/gntalloc.h b/extras/mini-os/include/gntalloc.h
new file mode 100644
index 0000000..8997900
--- /dev/null
+++ b/extras/mini-os/include/gntalloc.h
@@ -0,0 +1,39 @@
+#ifndef _GNTALLOC_H
+#define _GNTALLOC_H
+
+#include <xen/grant_table.h>
+/* for LIST_* */
+#include <sys/queue.h>
+#include <stdint.h>
+
+struct notify_info {
+    /* Clear (set to zero) the byte specified by index */
+    uint32_t off;         /* Offset of the byte to clear, -1 if unused */
+    /* Send an interrupt on the indicated event channel */
+    evtchn_port_t event;  /* Port (event channel) to notify, -1 if unused */
+};
+
+/* Metadata on a grant reference. */
+struct gntalloc_gref {
+    LIST_ENTRY(gntalloc_gref) next_gref;  /* list entry gref_list */
+    void *virtual_address;       /* The shared pages - start address */
+    int count;                   /* Pages count */
+    struct notify_info notify;   /* Unmap notification */
+    grant_ref_t gref_ids[];      /* The grant reference numbers - array of 'count' size */
+};
+
+struct gntalloc {
+    LIST_HEAD(, gntalloc_gref) gref_list;
+};
+
+int gntalloc_init(struct gntalloc *alloc);
+void gntalloc_fini(struct gntalloc *alloc);
+
+void *gntalloc_share_pages(struct gntalloc *gntalloc, 
+        uint32_t domid, int count,
+        uint32_t *refs, int writable, 
+        uint32_t notify_offset, evtchn_port_t notify_port);
+int gntalloc_munmap(struct gntalloc *gntalloc, void *start_address, int count);
+
+
+#endif /* _GNTALLOC_H */
-- 
1.8.1.4

