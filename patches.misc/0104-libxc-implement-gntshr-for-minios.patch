From fccff07449e45fb427fab4f341f885e6752fc848 Mon Sep 17 00:00:00 2001
From: Marek Marczykowski <marmarek@invisiblethingslab.com>
Date: Tue, 23 Apr 2013 05:17:59 +0200
Subject: [PATCH 104/105] libxc: implement gntshr for minios
Organization: Invisible Things Lab
Cc: Marek Marczykowski <marmarek@invisiblethingslab.com>

Based on gntalloc interface introduced in previous patch.

Signed-off-by: Marek Marczykowski <marmarek@invisiblethingslab.com>
---
 tools/libxc/xc_minios.c      | 55 ++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 55 insertions(+)

diff --git a/tools/libxc/xc_minios.c b/tools/libxc/xc_minios.c
index dec4d73..01a1266 100644
--- a/tools/libxc/xc_minios.c
+++ b/tools/libxc/xc_minios.c
@@ -26,6 +26,7 @@
 #include <mini-os/mm.h>
 #include <mini-os/lib.h>
 #include <mini-os/gntmap.h>
+#include <mini-os/gntalloc.h>
 #include <mini-os/events.h>
 #include <mini-os/wait.h>
 #include <sys/mman.h>
@@ -45,6 +46,7 @@
 void minios_interface_close_fd(int fd);
 void minios_evtchn_close_fd(int fd);
 void minios_gnttab_close_fd(int fd);
+void minios_gntalloc_close_fd(int fd);
 
 extern void minios_interface_close_fd(int fd);
 extern void minios_evtchn_close_fd(int fd);
@@ -519,6 +521,57 @@ static struct xc_osdep_ops minios_gnttab_ops = {
     },
 };
 
+static xc_osdep_handle minios_gntshr_open(xc_gntshr *xcg)
+{
+    int fd = alloc_fd(FTYPE_GNTALLOC);
+    if ( fd == -1 )
+        return XC_OSDEP_OPEN_ERROR;
+    gntalloc_init(&files[fd].gntalloc);
+    return (xc_osdep_handle)fd;
+}
+
+static int minios_gntshr_close(xc_gntshr *xcg, xc_osdep_handle h)
+{
+    int fd = (int)h;
+    return close(fd);
+}
+
+void minios_gntalloc_close_fd(int fd)
+{
+    gntalloc_fini(&files[fd].gntalloc);
+    files[fd].type = FTYPE_NONE;
+}
+
+static void *minios_gntshr_share_pages(xc_gntshr *xch, xc_osdep_handle h,
+                                      uint32_t domid, int count,
+                                      uint32_t *refs, int writable,
+                                      uint32_t notify_offset,
+                                      evtchn_port_t notify_port)
+{
+    int fd = (int)h;
+
+    return gntalloc_share_pages(&files[fd].gntalloc, domid, count, refs,
+            writable, notify_offset, notify_port);
+}
+
+static int minios_gntshr_munmap(xc_gntshr *xcg, xc_osdep_handle h,
+                               void *start_address, uint32_t count)
+{
+    int fd = (int)h;
+
+    return gntalloc_munmap(&files[fd].gntalloc, start_address, count);
+}
+
+static struct xc_osdep_ops minios_gntshr_ops = {
+    .open = &minios_gntshr_open,
+    .close = &minios_gntshr_close,
+
+    .u.gntshr = {
+        .share_pages = &minios_gntshr_share_pages,
+        .munmap = &minios_gntshr_munmap,
+    },
+};
+
 static struct xc_osdep_ops *minios_osdep_init(xc_interface *xch, enum xc_osdep_type type)
 {
     switch ( type )
@@ -529,6 +582,8 @@ static struct xc_osdep_ops *minios_osdep_init(xc_interface *xch, enum xc_osdep_t
         return &minios_evtchn_ops;
     case XC_OSDEP_GNTTAB:
         return &minios_gnttab_ops;
+    case XC_OSDEP_GNTSHR:
+        return &minios_gntshr_ops;
     default:
         return NULL;
     }
-- 
1.8.1.4

